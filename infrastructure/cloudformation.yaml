AWSTemplateFormatVersion: '2010-09-09'
Description: 'Noise Monitor Infrastructure - DynamoDB, Lambda, API Gateway, SNS'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: Environment name
    AllowedValues: ['dev', 'staging', 'prod']

Resources:
  # SNS Topic for Noise Alerts
  NoiseAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'amplitude-noise-alerts-${Environment}'
      DisplayName: !Sub 'Amplitude Noise Alerts - ${Environment}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Noise monitoring alerts'

  # SNS Topic Policy
  NoiseAlertsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref NoiseAlertsTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sns:Publish
            Resource: !Ref NoiseAlertsTopic
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - sns:Subscribe
              - sns:Receive
            Resource: !Ref NoiseAlertsTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  # DynamoDB Table
  NoiseMonitorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'noise-monitor-data-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: unitId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UnitIdIndex
          KeySchema:
            - AttributeName: unitId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Users DynamoDB Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'noise-monitor-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt NoiseMonitorTable.Arn
                  - !Sub '${NoiseMonitorTable.Arn}/index/*'
                  - !GetAtt UsersTable.Arn
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NoiseAlertsTopic

  # IAM Role for Raspberry Pi
  RaspberryPiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'amplitude-raspberry-pi-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplitudeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - dynamodb:PutItem
                Resource:
                  - !Ref NoiseAlertsTopic
                  - !GetAtt NoiseMonitorTable.Arn

  # IAM User for Raspberry Pi (for access keys)
  RaspberryPiUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub 'amplitude-raspberry-pi-${Environment}'
      Policies:
        - PolicyName: AmplitudeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - dynamodb:PutItem
                Resource:
                  - !Ref NoiseAlertsTopic
                  - !GetAtt NoiseMonitorTable.Arn

  # Lambda Function for Processing Noise Data
  NoiseMonitorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'noise-monitor-processor-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Lambda function placeholder' })
            };
          };
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref NoiseMonitorTable
      Timeout: 30
      MemorySize: 256

  # Lambda Function for Getting Data
  GetDataLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'noise-monitor-getdata-${Environment}'
      Runtime: nodejs18.x
      Handler: getData.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Get data Lambda function placeholder' })
            };
          };
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref NoiseMonitorTable
      Timeout: 30
      MemorySize: 256

  # Lambda Function for Getting User Data
  GetUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'get-user-${Environment}'
      Runtime: nodejs18.x
      Handler: getUser.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Get user Lambda function placeholder' })
            };
          };
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Timeout: 30
      MemorySize: 256

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'noise-monitor-api-${Environment}'
      Description: 'API Gateway for Noise Monitor application'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'noise'

  ProcessResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiResource
      PathPart: 'process'

  GetDataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ApiResource
      PathPart: 'data'

  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'user'

  # API Gateway Methods
  ProcessMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProcessResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NoiseMonitorLambda.Arn}/invocations'
      RequestParameters:
        method.request.header.Content-Type: true

  GetDataMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GetDataResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDataLambda.Arn}/invocations'

  GetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserLambda.Arn}/invocations'

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProcessResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Responses:
          default:
            StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''

  # Lambda Permissions
  ProcessLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NoiseMonitorLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/noise/process'

  GetDataLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetDataLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/noise/data'

  GetUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUserLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/user'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProcessMethod
      - GetDataMethod
      - GetUserMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  SNSTopicArn:
    Description: 'SNS Topic ARN for noise alerts'
    Value: !Ref NoiseAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  SNSTopicName:
    Description: 'SNS Topic Name'
    Value: !Ref NoiseAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicName'

  DynamoDBTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref NoiseMonitorTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  UsersTableName:
    Description: 'Users Table Name'
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-UsersTableName'

  ProcessEndpoint:
    Description: 'Process noise data endpoint'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/noise/process'
    Export:
      Name: !Sub '${AWS::StackName}-ProcessEndpoint'

  GetDataEndpoint:
    Description: 'Get noise data endpoint'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/noise/data'
    Export:
      Name: !Sub '${AWS::StackName}-GetDataEndpoint'

  GetUserEndpoint:
    Description: 'Get user data endpoint'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/user'
    Export:
      Name: !Sub '${AWS::StackName}-GetUserEndpoint' 